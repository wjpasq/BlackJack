
package blackjack;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class MainWindow extends javax.swing.JFrame {
    
    private Stack<Card> deck = new Stack();
    //this will hold all the cards in the deck
    private ArrayList<Player> playersList = new ArrayList();
    //this will hold a all the players, excluding the dealer, that are playing
    private Player dealer = new Player();
    //this is the dealer object
    private Integer playerIndex;
    //this holds the index in the playersList of the player whose turn it
    //currently is. If it is currently the dealer's turn, it will be null
    private File currentFile;
    //Holds the same location for the Data file, this holds the file location 
    //where the data will be saved
    private boolean gameplay;
    //this will be true when the game is being played, and false when the
    //players are selecting their bets, in the mainMenu window, or when 
    //the dealer is done with its turn. This is used to decide which window
    //to open when opening a saved game.
    
    ///////////////needed for probability calculation/////////////////////
    private ArrayList<Integer> hitList = new ArrayList();               //
    //holds the values of cards that the dealer will hit on             //
    private int times = 0;                                              //
    //Holds the number of total number of possible card that the        //
    //dealer's could have                                               //
    private int count = 0;                                              //
    //Holds the total number of cards that give the desired outcome     //
    //(either busts or times that the dealer beats the player)          //
    private int initTotal = 0;                                          //
    //Holds the dealer up-card value                                    //
    private int removed = 0;                                            //
    //Holds the card value that was most recently removed from the deck //
    //////////////////////////////////////////////////////////////////////
    
   
    public MainWindow() {
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog_gamePlay = new javax.swing.JDialog();
        panel_gamePlay = new javax.swing.JPanel();
        label_playerTurn = new javax.swing.JLabel();
        label_dealerUpCard = new javax.swing.JLabel();
        label_dealerHoleCard = new javax.swing.JLabel();
        label_deck = new javax.swing.JLabel();
        label_playerCard2 = new javax.swing.JLabel();
        label_playerCard1 = new javax.swing.JLabel();
        label_bet = new javax.swing.JLabel();
        label_money = new javax.swing.JLabel();
        button_hit = new javax.swing.JButton();
        button_stay = new javax.swing.JButton();
        button_split = new javax.swing.JButton();
        button_doubleDown = new javax.swing.JButton();
        button_insurance = new javax.swing.JButton();
        label_probability = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menuItem_saveAs = new javax.swing.JMenuItem();
        menuItem_save = new javax.swing.JMenuItem();
        menu_edit = new javax.swing.JMenu();
        dialog_betWindow = new javax.swing.JDialog();
        panel_bets = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        button_startGame = new javax.swing.JButton();
        panel_mainMenu = new javax.swing.JPanel();
        label_blackJack = new javax.swing.JLabel();
        button_newGame = new javax.swing.JButton();
        comboBox_playerNum = new javax.swing.JComboBox<>();
        button_openGame = new javax.swing.JButton();

        dialog_gamePlay.setBackground(new java.awt.Color(102, 153, 0));
        dialog_gamePlay.setMinimumSize(new java.awt.Dimension(912, 730));

        panel_gamePlay.setBackground(new java.awt.Color(102, 153, 0));
        panel_gamePlay.setForeground(new java.awt.Color(255, 255, 255));
        panel_gamePlay.setMaximumSize(new java.awt.Dimension(912, 664));
        panel_gamePlay.setMinimumSize(new java.awt.Dimension(912, 664));
        panel_gamePlay.setLayout(null);

        label_playerTurn.setForeground(new java.awt.Color(255, 255, 255));
        label_playerTurn.setText("Player 1");
        panel_gamePlay.add(label_playerTurn);
        label_playerTurn.setBounds(36, 34, 100, 16);

        label_dealerUpCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blackjack/back of card.png"))); // NOI18N
        label_dealerUpCard.setMaximumSize(new java.awt.Dimension(150, 200));
        label_dealerUpCard.setMinimumSize(new java.awt.Dimension(150, 200));
        label_dealerUpCard.setPreferredSize(new java.awt.Dimension(150, 200));
        panel_gamePlay.add(label_dealerUpCard);
        label_dealerUpCard.setBounds(380, 70, 150, 200);

        label_dealerHoleCard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blackjack/back of card.png"))); // NOI18N
        label_dealerHoleCard.setMaximumSize(new java.awt.Dimension(150, 200));
        label_dealerHoleCard.setMinimumSize(new java.awt.Dimension(150, 200));
        label_dealerHoleCard.setPreferredSize(new java.awt.Dimension(150, 200));
        panel_gamePlay.add(label_dealerHoleCard);
        label_dealerHoleCard.setBounds(310, 70, 150, 200);

        label_deck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blackjack/back of card.png"))); // NOI18N
        label_deck.setMaximumSize(new java.awt.Dimension(150, 200));
        label_deck.setMinimumSize(new java.awt.Dimension(150, 200));
        label_deck.setPreferredSize(new java.awt.Dimension(150, 200));
        panel_gamePlay.add(label_deck);
        label_deck.setBounds(710, 30, 150, 200);

        label_playerCard2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blackjack/back of card.png"))); // NOI18N
        label_playerCard2.setMaximumSize(new java.awt.Dimension(150, 200));
        label_playerCard2.setMinimumSize(new java.awt.Dimension(150, 200));
        label_playerCard2.setPreferredSize(new java.awt.Dimension(150, 200));
        panel_gamePlay.add(label_playerCard2);
        label_playerCard2.setBounds(380, 410, 150, 200);

        label_playerCard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/blackjack/back of card.png"))); // NOI18N
        label_playerCard1.setMaximumSize(new java.awt.Dimension(150, 200));
        label_playerCard1.setMinimumSize(new java.awt.Dimension(150, 200));
        label_playerCard1.setPreferredSize(new java.awt.Dimension(150, 200));
        panel_gamePlay.add(label_playerCard1);
        label_playerCard1.setBounds(310, 410, 150, 200);

        label_bet.setForeground(new java.awt.Color(255, 255, 255));
        label_bet.setText("Bet");
        panel_gamePlay.add(label_bet);
        label_bet.setBounds(380, 340, 100, 16);

        label_money.setForeground(new java.awt.Color(255, 255, 255));
        label_money.setText("Player Money\n");
        panel_gamePlay.add(label_money);
        label_money.setBounds(390, 630, 110, 16);

        button_hit.setText("Hit");
        button_hit.setMaximumSize(new java.awt.Dimension(57, 25));
        button_hit.setMinimumSize(new java.awt.Dimension(57, 25));
        button_hit.setPreferredSize(new java.awt.Dimension(57, 25));
        button_hit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_hitActionPerformed(evt);
            }
        });
        panel_gamePlay.add(button_hit);
        button_hit.setBounds(210, 460, 60, 25);

        button_stay.setText("Stay");
        button_stay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_stayActionPerformed(evt);
            }
        });
        panel_gamePlay.add(button_stay);
        button_stay.setBounds(210, 520, 60, 25);

        button_split.setText("Split");
        button_split.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_splitActionPerformed(evt);
            }
        });
        panel_gamePlay.add(button_split);
        button_split.setBounds(550, 360, 57, 25);

        button_doubleDown.setText("Double Down");
        button_doubleDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_doubleDownActionPerformed(evt);
            }
        });
        panel_gamePlay.add(button_doubleDown);
        button_doubleDown.setBounds(630, 360, 110, 25);

        button_insurance.setText("Insurance");
        button_insurance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_insuranceActionPerformed(evt);
            }
        });
        panel_gamePlay.add(button_insurance);
        button_insurance.setBounds(770, 360, 89, 25);

        label_probability.setForeground(new java.awt.Color(255, 255, 255));
        label_probability.setText("Probability: ");
        panel_gamePlay.add(label_probability);
        label_probability.setBounds(30, 60, 240, 16);

        menu_file.setText("File");

        menuItem_saveAs.setText("Save As");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_saveAs);

        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_save);

        jMenuBar1.add(menu_file);

        menu_edit.setText("Edit");
        jMenuBar1.add(menu_edit);

        dialog_gamePlay.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout dialog_gamePlayLayout = new javax.swing.GroupLayout(dialog_gamePlay.getContentPane());
        dialog_gamePlay.getContentPane().setLayout(dialog_gamePlayLayout);
        dialog_gamePlayLayout.setHorizontalGroup(
            dialog_gamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_gamePlayLayout.createSequentialGroup()
                .addComponent(panel_gamePlay, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        dialog_gamePlayLayout.setVerticalGroup(
            dialog_gamePlayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_gamePlayLayout.createSequentialGroup()
                .addComponent(panel_gamePlay, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        dialog_betWindow.setBackground(new java.awt.Color(51, 153, 0));
        dialog_betWindow.setMinimumSize(new java.awt.Dimension(810, 525));

        panel_bets.setBackground(new java.awt.Color(102, 153, 0));
        panel_bets.setMaximumSize(new java.awt.Dimension(810, 525));
        panel_bets.setMinimumSize(new java.awt.Dimension(810, 525));
        panel_bets.setPreferredSize(new java.awt.Dimension(810, 525));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PLACE YOUR BETS!");

        button_startGame.setText("Start Game");
        button_startGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_startGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_betsLayout = new javax.swing.GroupLayout(panel_bets);
        panel_bets.setLayout(panel_betsLayout);
        panel_betsLayout.setHorizontalGroup(
            panel_betsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_betsLayout.createSequentialGroup()
                .addContainerGap(233, Short.MAX_VALUE)
                .addGroup(panel_betsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(panel_betsLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(button_startGame)))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        panel_betsLayout.setVerticalGroup(
            panel_betsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_betsLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addComponent(button_startGame)
                .addContainerGap(330, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialog_betWindowLayout = new javax.swing.GroupLayout(dialog_betWindow.getContentPane());
        dialog_betWindow.getContentPane().setLayout(dialog_betWindowLayout);
        dialog_betWindowLayout.setHorizontalGroup(
            dialog_betWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_bets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialog_betWindowLayout.setVerticalGroup(
            dialog_betWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_bets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_mainMenu.setBackground(new java.awt.Color(102, 153, 0));

        label_blackJack.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        label_blackJack.setForeground(new java.awt.Color(255, 255, 255));
        label_blackJack.setText("BLACK JACK");

        button_newGame.setText("New Game");
        button_newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_newGameActionPerformed(evt);
            }
        });

        comboBox_playerNum.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBox_playerNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_playerNumActionPerformed(evt);
            }
        });

        button_openGame.setText("Open Game");
        button_openGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_openGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_mainMenuLayout = new javax.swing.GroupLayout(panel_mainMenu);
        panel_mainMenu.setLayout(panel_mainMenuLayout);
        panel_mainMenuLayout.setHorizontalGroup(
            panel_mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_mainMenuLayout.createSequentialGroup()
                .addContainerGap(274, Short.MAX_VALUE)
                .addGroup(panel_mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_blackJack, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_mainMenuLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(button_newGame)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBox_playerNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_mainMenuLayout.createSequentialGroup()
                        .addComponent(button_openGame)
                        .addGap(99, 99, 99)))
                .addContainerGap(275, Short.MAX_VALUE))
        );
        panel_mainMenuLayout.setVerticalGroup(
            panel_mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_mainMenuLayout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(label_blackJack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(panel_mainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_newGame)
                    .addComponent(comboBox_playerNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(button_openGame)
                .addContainerGap(268, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_mainMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_mainMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBox_playerNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_playerNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBox_playerNumActionPerformed

    private void button_newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_newGameActionPerformed
        //Will only start new game if a number of players has been selected
        if (comboBox_playerNum.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "need to select number players", "ERROR: no players", JOptionPane.ERROR_MESSAGE);
        } else {
            dialog_betWindow.setVisible(true);
            
            ///////Clear previous buttons and labels///
            if (panel_bets.getComponentCount() > 2) {
                for (int i = 2; i < panel_bets.getComponentCount(); i++) {
                    panel_bets.getComponent(i).setVisible(false);
                }
            }
            
            //////add players to list///////
            playersList.clear();
            
            for (int i = 0; i < Integer.parseInt(comboBox_playerNum.getSelectedItem().toString()); i++) {
                playersList.add(new Player());
            }
            
            ArrayList<JLabel> labelList = new ArrayList();
            ArrayList<JButton> buttonList = new ArrayList();
            for (int i = 0; i < playersList.size(); i++) {
                final int num = i;
                
                //set bet for players to 500
                playersList.get(i).setBet(500);
                
                //add label and + - buttons to for every player
                labelList.add(new JLabel("Player " + (i + 1) + " bet: $" + "500"));
                buttonList.add(new JButton("+"));
                buttonList.add(new JButton("-"));
                
                //add properties to each label/button
                labelList.get(i).setBounds((i + 1) * (panel_bets.getWidth()/(playersList.size() + 1)) - 80, (int)(.75 * panel_bets.getHeight()), 120, 40);
                labelList.get(i).setForeground(Color.white);
                buttonList.get(buttonList.size() - 1).setBounds(labelList.get(i).getX() + 115, labelList.get(i).getY() + 20, 40, 20);
                buttonList.get(buttonList.size() - 2).setBounds(labelList.get(i).getX() + 115, labelList.get(i).getY(), 40, 20);
                buttonList.get(buttonList.size() - 1).addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (playersList.get(num).getBet() > 500) {
                            playersList.get(num).setBet(playersList.get(num).getBet() - 500);
                            labelList.get(num).setText("Player " + (num + 1) + " bet: $" + playersList.get(num).getBet());
                        } else {
                            JOptionPane.showMessageDialog(dialog_betWindow, "500 is the minimum bet", "ERROR: cant bet lower than 500", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                });
                buttonList.get(buttonList.size() - 2).addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (playersList.get(num).getBet() < playersList.get(num).getMoney()) {
                            playersList.get(num).setBet(playersList.get(num).getBet() + 500);
                            labelList.get(num).setText("Player " + (num + 1) + " bet: $" + playersList.get(num).getBet());
                        } else {
                            JOptionPane.showMessageDialog(dialog_betWindow, "Player " + (num + 1) + " only has $" + playersList.get(num).getMoney() + " to bet", "ERROR: bet exceeds player's available money", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                });
                
                panel_bets.add(labelList.get(i));
                panel_bets.add(buttonList.get(buttonList.size() - 1));
                panel_bets.add(buttonList.get(buttonList.size() - 2));
            }
            
            panel_bets.repaint();
        }
    }//GEN-LAST:event_button_newGameActionPerformed

    private void button_startGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_startGameActionPerformed
        /////set gameplay to true/////////////////
        gameplay = true;

        ///////Clear previous buttons and labels///
        if (panel_gamePlay.getComponentCount() > 14) {
            for (int i = 14; i < panel_gamePlay.getComponentCount(); i++) {
                panel_gamePlay.getComponent(i - 14).setVisible(false);
            }
        }
        
        //Set the cards and buttons back to original position
        label_playerCard1.setLocation(310, 410);
        label_playerCard2.setLocation(380, 410);
        button_hit.setLocation(210, 460);
        button_stay.setLocation(210, 520);
        
        dialog_betWindow.setVisible(false);
        dialog_gamePlay.setVisible(true);
        
        //////set up panel_gamePlay/////////////////////////////////////////////

        //make buttons and labels visible
        label_playerTurn.setVisible(true);
        label_deck.setVisible(true);
        button_hit.setVisible(true);
        button_stay.setVisible(true);
        button_hit.setEnabled(true);
        button_stay.setEnabled(true);
        label_probability.setVisible(true);
        
        //hide specials
        button_split.setEnabled(true);
        button_doubleDown.setEnabled(true);
        button_insurance.setEnabled(true);
        button_split.setVisible(false);
        button_doubleDown.setVisible(false);
        button_insurance.setVisible(false);
        
        //add back-of-card imageIcon to dealer hole card and deck card
        label_dealerHoleCard.setVisible(true);
        label_dealerUpCard.setVisible(true);
        label_dealerHoleCard.setLocation(310, 70);
        label_dealerUpCard.setLocation(380, 70);
        Card card = new Card();
        ImageIcon icon = new ImageIcon(card.getImageMap().get("back of card").getAbsolutePath());
        icon = resizeImageIcon(icon, label_dealerHoleCard);
        label_dealerHoleCard.setIcon(icon);
        label_deck.setIcon(icon);

        ///////////////////////////CHANGE AFTER DONE TESTING SPLIT//////////////////

        if (playerIndex != null) {
            label_playerTurn.setText("Player " + (playerIndex + 1));
            
        } else {
            label_playerTurn.setText("Player 1");
            playerIndex = 0;
            
            //update bet and money for each player and clear each hand
            for (Player player : playersList) {
                player.setMoney(player.getMoney() - player.getBet());
                player.clearHand();
                player.clearSecondHand();
                player.setSplit(false);
            }
            
            //clear dealer hand
            dealer.clearHand();
            
            ////deal first cards///////
            Card dealerHoleCard = new Card(deck.pop().toString());
            Card dealerUpCard = new Card(deck.pop().toString());
            for (int i = 0; i < playersList.size(); i++) {
                playersList.get(i).addCard(new Card(deck.pop().toString()));
                playersList.get(i).addCard(new Card(deck.pop().toString()));
            }
            
            //add cards to dealer hand
            dealer.addCard(dealerHoleCard);
            dealer.addCard(dealerUpCard);
        }
        
        //set up bet and money label
        label_money.setVisible(true);
        label_bet.setVisible(true);
        String str = "" + playersList.get(playerIndex).getBet();
        String moneyString = "" + playersList.get(0).getMoney();
        
        //format the money strings with "$" and commas
        if (str.length() > 3) {
            String endString = str.substring(str.length() - 3);
            String beginningString = str.substring(0, str.length() - 3);
            str = beginningString + "," + endString;
        }
        
        if (moneyString.length() > 3) {
            String end = moneyString.substring(moneyString.length() - 3);
            String begin = moneyString.substring(0, moneyString.length() - 3);
            moneyString = begin + "," + end;
        }
        
        label_bet.setText("Bet : $" + str);
        label_money.setText("Money : $" + moneyString);
        
        Card playerCard1 = playersList.get(playerIndex).getHand().get(0);
        Card playerCard2 = playersList.get(playerIndex).getHand().get(1);
        
        Card dealerUpCard = dealer.getHand().get(1);
        
        //set chance
        String prob = getPercentChance(playersList.get(playerIndex).getHand());
        label_probability.setText("Probability: " + prob);
        
        /////////////display cards//////////////////////

        //dislpay dealer card
        icon = new ImageIcon(dealerUpCard.getImageMap().get(dealerUpCard.getName()).getAbsolutePath());
        icon = resizeImageIcon(icon, label_dealerUpCard);
        label_dealerUpCard.setIcon(icon);

        //display player1 cards
        label_playerCard1.setVisible(true);
        label_playerCard2.setVisible(true);
        icon = new ImageIcon(playerCard1.getImageMap().get(playerCard1.getName()).getAbsolutePath());
        icon = resizeImageIcon(icon, label_playerCard1);
        label_playerCard1.setIcon(icon);
        icon = new ImageIcon(playerCard2.getImageMap().get(playerCard2.getName()).getAbsolutePath());
        icon = resizeImageIcon(icon, label_playerCard2);
        label_playerCard2.setIcon(icon);
        
        ////check for specials//////////////////////
        
        if (split(playersList.get(playerIndex))) {
            //display split button
            button_split.setVisible(true);
        }
        if (doubleDown(playersList.get(playerIndex))) {
            //display doubleDown button
            button_doubleDown.setVisible(true);
        }
        if (insurance(playersList.get(playerIndex))) {
            //display insurance button
            button_insurance.setVisible(true);
        }
    }//GEN-LAST:event_button_startGameActionPerformed

    private void button_hitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_hitActionPerformed
        //add card from deck to players hand
        Card newCard = deck.pop();
        playersList.get(playerIndex).addCard(newCard);
        
        //create new JLabel with the new card
        JLabel newCardLabel = new JLabel();
        newCardLabel.setBounds(label_playerCard1.getX() + (75 * (playersList.get(playerIndex).getHand().size() - 1)), 410, 150, 200);
        ImageIcon icon = new ImageIcon(newCard.getImageMap().get(newCard.getName()).getAbsolutePath());
        icon = resizeImageIcon(icon, newCardLabel);
        newCardLabel.setIcon(icon);
        
        //add label to panel
        panel_gamePlay.add(newCardLabel);
        panel_gamePlay.setComponentZOrder(newCardLabel, 0);
        panel_gamePlay.repaint();
        
        //check total to see if player bust
        if (bust(playersList.get(playerIndex))) {
            //display Bust and wait 3 seconds then go to next turn
            displayBust(label_playerCard1);
            if (playersList.size() > playerIndex + 1) {
                Timer timer = new Timer();
                TimerTask startNextTurn = new TimerTask() {
                    @Override
                    public void run() {
                        startNextTurn();
                    }
                };
                timer.schedule(startNextTurn, 2500);
            } else {
                Timer timer = new Timer();
                TimerTask startNextTurn = new TimerTask() {
                    @Override
                    public void run() {
                        startDealerTurn();
                    }
                };
                timer.schedule(startNextTurn, 2500);
            }
        } else {
            //set chance
            String prob = getPercentChance(playersList.get(playerIndex).getHand());
            label_probability.setText("Probability: " + prob);
        }
        
        //hide specials
        button_split.setVisible(false);
        button_doubleDown.setVisible(false);
    }//GEN-LAST:event_button_hitActionPerformed

    private void button_stayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_stayActionPerformed
        //Go to next turn
        if (playersList.size() > (playerIndex + 1))
            startNextTurn();
        else
            startDealerTurn();
    }//GEN-LAST:event_button_stayActionPerformed

    private void button_doubleDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_doubleDownActionPerformed
        //hide doubleDown button
        button_doubleDown.setVisible(false);
        
        //set split button to false
        button_split.setVisible(false);
        
        int turn = Integer.parseInt("" + label_playerTurn.getText().charAt(label_playerTurn.getText().length() - 1)) - 1;
        
        //double bet and update money
        playersList.get(playerIndex).setMoney(playersList.get(playerIndex).getMoney() - playersList.get(playerIndex).getBet());
        playersList.get(turn).setBet(2 * playersList.get(turn).getBet());
        String str = "" + playersList.get(turn).getBet();
        String moneyString = "" + playersList.get(playerIndex).getMoney();
        if (str.length() > 3) {
            String endString = str.substring(str.length() - 3);
            String beginningString = str.substring(0, str.length() - 3);
            str = beginningString + "," + endString;
        }
        if (moneyString.length() > 3) {
            String end = moneyString.substring(moneyString.length() - 3);
            String begin = moneyString.substring(0, moneyString.length() - 3);
            moneyString = begin + "," + end;
        }
        
        label_money.setText("Money : $ " + moneyString);
        label_bet.setText("Bet : $" + str);
        
        //call hit
        button_hitActionPerformed(evt);
        
        //go to next turn
        if (playersList.size() > turn + 1) {
            Timer timer = new Timer();
            TimerTask startNextTurn = new TimerTask() {
                @Override
                public void run() {
                    startNextTurn();
                }
            };
            timer.schedule(startNextTurn, 2000);
        } else {
            Timer timer = new Timer();
            TimerTask startNextTurn = new TimerTask() {
                @Override
                public void run() {
                    startDealerTurn();
                }
            };
            timer.schedule(startNextTurn, 2000);
        }
        
    }//GEN-LAST:event_button_doubleDownActionPerformed

    private void button_insuranceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_insuranceActionPerformed
        //set insurance button to invisible
        button_insurance.setVisible(false);
        
        //add insurance bet to player
        playersList.get(playerIndex).setInsurance(playersList.get(playerIndex).getBet() / 2);
        
        //////make side bet label///////////
        //format money string with $ and commas
        String str = "" + playersList.get(playerIndex).getBet() / 2;
        if (str.length() > 3) {
            String endString = str.substring(str.length() - 3);
            String beginningString = str.substring(0, str.length() - 3);
            str = beginningString + "," + endString;
        }

        //add label to panel
        JLabel sideBet = new JLabel("Insurance bet : $" + str);
        sideBet.setBounds(label_bet.getX() - 160, label_bet.getY(), 140, 20);
        sideBet.setForeground(Color.white);
        panel_gamePlay.add(sideBet);
        panel_gamePlay.setComponentZOrder(sideBet, 0);
        panel_gamePlay.repaint();

    }//GEN-LAST:event_button_insuranceActionPerformed

    private void button_splitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_splitActionPerformed
        //disable first hit and stay buttons
        button_hit.setEnabled(false);
        button_stay.setEnabled(false);
        
        //hide double down button
        button_doubleDown.setVisible(false);

        //set split boolean for player to true
        playersList.get(playerIndex).setSplit(true);
        
        //match the bet for the second hand
        playersList.get(playerIndex).setMoney(playersList.get(playerIndex).getMoney() - playersList.get(playerIndex).getBet());
        
        //update money label
        String moneyString = "" + playersList.get(0).getMoney();
        
        if (moneyString.length() > 3) {
            String end = moneyString.substring(moneyString.length() - 3);
            String begin = moneyString.substring(0, moneyString.length() - 3);
            moneyString = begin + "," + end;
        }
        label_money.setText("Money : $" + moneyString);
        
        //remove second card from playerHand
        Card secondCard = playersList.get(playerIndex).getHand().get(1);
        playersList.get(playerIndex).getHand().remove(1);
        
        //add second card to playerSecond Hand
        playersList.get(playerIndex).secondHandAddCard(secondCard);
        
        //hide split button
        button_split.setVisible(false);
        
        //Move card 2 to the right
        label_playerCard2.setLocation(label_playerCard1.getX() + 300, label_playerCard1.getY());
        
        //update probability with second hand
        String prob = getPercentChance(playersList.get(playerIndex).getSecondHand());
        label_probability.setText("Probability for hand 2: " + prob);
        
        // make copy of buttons
        JButton button_hand2Hit = new JButton("Hit");
        button_hand2Hit.setBounds(label_playerCard2.getX() - 100, button_hit.getY(), button_hit.getWidth(), button_hit.getHeight());
        JButton button_hand2Stay = new JButton("Stay");
        button_hand2Stay.setBounds(label_playerCard2.getX() - 100, button_stay.getY(), button_stay.getWidth(), button_stay.getHeight());
        button_hand2Hit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //add card from deck to players hand
                playersList.get(playerIndex).secondHandAddCard(new Card(deck.pop().toString()));
                Card newCard = playersList.get(playerIndex).getSecondHand().get(playersList.get(playerIndex).getSecondHand().size() - 1);
                
                //update probability with second hand
                String prob = getPercentChance(playersList.get(playerIndex).getSecondHand());
                label_probability.setText("Probability for hand 2: " + prob);
                
                //create new JLabel with the new card
                JLabel newCardLabel = new JLabel();
                newCardLabel.setBounds(label_playerCard2.getX() + (75 * (playersList.get(playerIndex).getSecondHand().size() - 1)), 410, 150, 200);
                ImageIcon icon = new ImageIcon(newCard.getImageMap().get(newCard.getName()).getAbsolutePath());
                icon = resizeImageIcon(icon, newCardLabel);
                newCardLabel.setIcon(icon);

                //add label to panel
                panel_gamePlay.add(newCardLabel);
                panel_gamePlay.setComponentZOrder(newCardLabel, 0);
                panel_gamePlay.repaint();
                
                //check total to see if player bust
                if (secondHandBust(playersList.get(playerIndex))) {
                    //change probability to other hand
                    prob = getPercentChance(playersList.get(playerIndex).getHand());
                    label_probability.setText("Probability: " + prob);
                    
                    //display Bust and wait 2.5 seconds
                    displayBust(label_playerCard2);
                    button_hand2Hit.setEnabled(false);
                    button_hand2Stay.setEnabled(false);
                    button_hit.setEnabled(true);
                    button_stay.setEnabled(true);
                }
            }
        });
        button_hand2Stay.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                button_hand2Hit.setEnabled(false);
                button_hand2Stay.setEnabled(false);
                button_hit.setEnabled(true);
                button_stay.setEnabled(true);
                
                //update probability with second hand
                String prob = getPercentChance(playersList.get(playerIndex).getHand());
                label_probability.setText("Probability for hand 2: " + prob);
            }
        });
        
        //add new hit and stay buttons to label
        panel_gamePlay.add(button_hand2Hit);
        panel_gamePlay.setComponentZOrder(button_hand2Hit, 0);
        panel_gamePlay.add(button_hand2Stay);
        panel_gamePlay.setComponentZOrder(button_hand2Stay, 0);
        panel_gamePlay.repaint();
        
        //Move card 1 and hit and stay buttons to the left
        label_playerCard1.setLocation(label_playerCard1.getX() - 150, label_playerCard1.getY());
        button_hit.setLocation(button_hit.getX() - 150, button_hit.getY());
        button_stay.setLocation(button_stay.getX() - 150, button_stay.getY());
                
    }//GEN-LAST:event_button_splitActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveAsActionPerformed
        // Calls a file chooser. User chooses a file and the file is assigned
        // <currentFile> instance variable. Then, calls the saveActionPerformed
        // method to actually save the file
        
        JFileChooser jfc = new JFileChooser();
        
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            
            currentFile = jfc.getSelectedFile();
            menuItem_saveActionPerformed(evt);
        }
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveActionPerformed
        // Writes all data in the program to a DataModel and saves the model to 
        // the disk
        
        //if there is no saved file than go to save as method
        if (currentFile == null) {
            menuItem_saveAsActionPerformed(evt);
        }
        
        //if there is a current file, write data model to disk
        if (currentFile != null) {
            try {
                FileOutputStream fos = new FileOutputStream(currentFile);
                ObjectOutputStream oos = new ObjectOutputStream(fos);

                DataModel dm = new DataModel(deck, playersList, dealer, playerIndex, gameplay);

                oos.writeObject(dm);

                fos.close();
                oos.close();
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: File Not Found", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void button_openGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_openGameActionPerformed
        // reads the saved data(DataModel) from disk and replaces program
        // instance with data from DataModel
        
        //Create new fie chooser
        JFileChooser jfc = new JFileChooser();
        
        //check if the file chosen is compatable
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jfc.getSelectedFile();
        } else {
            return;
        }
        
        //open file and set data to data in file
        try {
            FileInputStream fis = new FileInputStream(currentFile);
            ObjectInputStream ois = new ObjectInputStream(fis);
            
            DataModel dm = (DataModel) ois.readObject();
            
            deck            = dm.getDeck();
            playersList     = dm.getPlayersList();
            dealer          = dm.getDealer();
            playerIndex     = dm.getPlayerIndex();
            gameplay        = dm.isGameplay();
            
            fis.close();
            ois.close();
            
            if (gameplay)
                button_startGameActionPerformed(evt);
            else
                nextRound();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: File Not Found", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Wrong File Typr", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_button_openGameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_doubleDown;
    private javax.swing.JButton button_hit;
    private javax.swing.JButton button_insurance;
    private javax.swing.JButton button_newGame;
    private javax.swing.JButton button_openGame;
    private javax.swing.JButton button_split;
    private javax.swing.JButton button_startGame;
    private javax.swing.JButton button_stay;
    private javax.swing.JComboBox<String> comboBox_playerNum;
    private javax.swing.JDialog dialog_betWindow;
    private javax.swing.JDialog dialog_gamePlay;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel label_bet;
    private javax.swing.JLabel label_blackJack;
    private javax.swing.JLabel label_dealerHoleCard;
    private javax.swing.JLabel label_dealerUpCard;
    private javax.swing.JLabel label_deck;
    private javax.swing.JLabel label_money;
    private javax.swing.JLabel label_playerCard1;
    private javax.swing.JLabel label_playerCard2;
    private javax.swing.JLabel label_playerTurn;
    private javax.swing.JLabel label_probability;
    private javax.swing.JMenuItem menuItem_save;
    private javax.swing.JMenuItem menuItem_saveAs;
    private javax.swing.JMenu menu_edit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JPanel panel_bets;
    private javax.swing.JPanel panel_gamePlay;
    private javax.swing.JPanel panel_mainMenu;
    // End of variables declaration//GEN-END:variables


    public void loadData() {
        ///////////////put deck in stack////////////
        
        Card card = new Card();
        ArrayList list = card.newDecks(6);
        for (Object item : list) {
            deck.add(new Card(item.toString()));
        }
        
        /////////load numbers in combo box///////////
        
        comboBox_playerNum.removeAllItems();
        comboBox_playerNum.addItem("Players");
        for (int i = 1; i <= 4; i++) {
            comboBox_playerNum.addItem("" + i);
        }
        
        /////////set gameplay to false//////////////
        
        gameplay = false;
    }

    private boolean split(Player player) {
        //check to see if the both cards in the player's hands are the same
        //number/face card and checks to make sure player has money to make 
        //bet
        String card1Name = player.getHand().get(player.getHand().size() - 2).getName();
        String card2Name = player.getHand().get(player.getHand().size() - 1).getName();
        card1Name = card1Name.substring(0, card1Name.indexOf(" "));
        card2Name = card2Name.substring(0, card2Name.indexOf(" "));
        return card1Name.equals(card2Name) && player.getMoney() >= player.getBet();
    }
    
    private boolean doubleDown(Player player) {
        if (player.getMoney() >= player.getBet()) {
            if (player.getTotal() == 9 || player.getTotal() == 10 || player.getTotal() == 11)
                return true;
            if (player.getSoftTotal() == 9 || player.getSoftTotal() == 10 || player.getSoftTotal() == 11)
                return true;
        }
        return false;
    }
    
    private boolean insurance(Player player) {
        return dealer.getHand().get(1).getValue() == 11 && player.getMoney() >= (player.getBet() / 2);
    }
    
    private boolean bust(Player player) {
        if (player.getTotal() == player.getSoftTotal()) {
            return player.getTotal() > 21;
        } else if (player.getSoftTotal() <= 21){
            return false;
        }
        return true;
    }
    
    private boolean bust(Player player, ArrayList<Card> hand) {
        if (player.getSecondHandTotal() == player.getSecondHandSoftTotal()) {
            return player.getSecondHandTotal() > 21;
        } else if (player.getSecondHandSoftTotal() <= 21){
            return false;
        }
        return true;
    }
    
    private boolean secondHandBust(Player player) {
        if (player.getSecondHandTotal() == player.getSecondHandSoftTotal()) {
            return player.getSecondHandTotal() > 21;
        } else if (player.getSecondHandSoftTotal() <= 21){
            return false;
        }
        return true;
    }
    
    private boolean playerWin(Player player) {
        if (bust(player))
            return false;
        if (bust(dealer))
            return true;
        
        if (blackJack(player) && !blackJack(dealer))
            return true;
        
        //get player total
        int playerTotal = 0;
        if (player.getTotal() == player.getSoftTotal())
            playerTotal = player.getTotal();
        else {
            if (player.getTotal() > 21)
                playerTotal = player.getSoftTotal();
            else
                playerTotal = player.getTotal();
        }
        
        //get dealer total
        int dealerTotal = 0;
        if (dealer.getTotal() == dealer.getSoftTotal())
            dealerTotal = dealer.getTotal();
        else {
            if (dealer.getTotal() > 21)
                dealerTotal = dealer.getSoftTotal();
            else
                dealerTotal = dealer.getTotal();
        }
        
        return playerTotal > dealerTotal;
    }
    
    private boolean playerWin(Player player, ArrayList<Card> hand) {
        if (bust(player, hand))
            return false;
        if (bust(dealer))
            return true;
        
        //get player total
        int playerTotal = 0;
        if (player.getSecondHandTotal() == player.getSecondHandSoftTotal())
            playerTotal = player.getSecondHandTotal();
        else {
            if (player.getSecondHandTotal() > 21)
                playerTotal = player.getSecondHandSoftTotal();
            else
                playerTotal = player.getSecondHandTotal();
        }
        
        //get dealer total
        int dealerTotal = 0;
        if (dealer.getTotal() == dealer.getSoftTotal())
            dealerTotal = dealer.getTotal();
        else {
            if (dealer.getTotal() > 21)
                dealerTotal = dealer.getSoftTotal();
            else
                dealerTotal = dealer.getTotal();
        }
        
        return playerTotal > dealerTotal;
    }
    
    private boolean playerTied(Player player) {
        if (bust(player))
            return false;
        if (bust(dealer))
            return false;
        
        //get player total
        int playerTotal = 0;
        if (player.getTotal() == player.getSoftTotal())
            playerTotal = player.getTotal();
        else {
            if (player.getTotal() > 21)
                playerTotal = player.getSoftTotal();
            else
                playerTotal = player.getTotal();
        }
        
        //get dealer total
        int dealerTotal = 0;
        if (dealer.getTotal() == dealer.getSoftTotal())
            dealerTotal = dealer.getTotal();
        else {
            if (dealer.getTotal() > 21)
                dealerTotal = dealer.getSoftTotal();
            else
                dealerTotal = dealer.getTotal();
        }
        
        return playerTotal == dealerTotal;
    }
    
    private boolean playerTied(Player player, ArrayList<Card> hand) {
        if (bust(player, hand))
            return false;
        if (bust(dealer))
            return false;
        
        //get player total
        int playerTotal = 0;
        if (player.getSecondHandTotal() == player.getSecondHandSoftTotal())
            playerTotal = player.getSecondHandTotal();
        else {
            if (player.getSecondHandTotal() > 21)
                playerTotal = player.getSecondHandSoftTotal();
            else
                playerTotal = player.getSecondHandTotal();
        }
        
        //get dealer total
        int dealerTotal = 0;
        if (dealer.getTotal() == dealer.getSoftTotal())
            dealerTotal = dealer.getTotal();
        else {
            if (dealer.getTotal() > 21)
                dealerTotal = dealer.getSoftTotal();
            else
                dealerTotal = dealer.getTotal();
        }
        
        return playerTotal == dealerTotal;
    }
    
    private boolean blackJack(Player player) {
        if (bust(player))
            return false;
        
        //get player total
        int playerTotal = 0;
        if (player.getTotal() == player.getSoftTotal())
            playerTotal = player.getTotal();
        else {
            if (player.getTotal() > 21)
                playerTotal = player.getSoftTotal();
            else
                playerTotal = player.getTotal();
        }
        
        return player.getHand().size() == 2 && playerTotal == 21;
    }
    
    private void displayBust(JLabel label) {
        //get number of how many card in current hand
        int num = 0;
        int addedCards = 0;
        if (!label_playerTurn.getText().equals("Dealer")) {
            
            num = Integer.parseInt("" + label_playerTurn.getText().charAt(label_playerTurn.getText().length() - 1));
            //check to see if displaying bust on split hand
            if (playersList.get(num - 1).getSecondHand().size() > playersList.get(num - 1).getHand().size()) {
                addedCards = playersList.get(num - 1).getSecondHand().size() - 2;
            } else
                addedCards = playersList.get(num - 1).getHand().size() - 2;
        }
        else {
            addedCards = dealer.getHand().size() - 2;
        }

        //disable hit, stay, and special move buttons
        button_hit.setEnabled(false);
        button_stay.setEnabled(false);
        button_doubleDown.setEnabled(false);
        button_split.setEnabled(false);
        button_insurance.setEnabled(false);
        
        //create new busted JLabel
        JLabel bustLabel = new JLabel("BUSTED");
        Font font = new Font("arial", Font.BOLD, 48);
        bustLabel.setFont(font);
        bustLabel.setForeground(Color.red);
        bustLabel.setBounds(label.getX() + (30 * addedCards), label.getY() + 40, 300, 100);
        
        //add label to panel
        panel_gamePlay.add(bustLabel);
        panel_gamePlay.setComponentZOrder(bustLabel, 0);
        panel_gamePlay.repaint();
    }
    
    private void startNextTurn() {
        //clear extra buttons and card images
        if (panel_gamePlay.getComponentCount() > 14) {
            for (int i = 14; i < panel_gamePlay.getComponentCount(); i++) {
                panel_gamePlay.getComponent(i - 14).setVisible(false);
            }
        }
        
        //put cards and hit and stay buttons back to their original position
        label_playerCard1.setLocation(310, 410);
        label_playerCard2.setLocation(380, 410);
        button_hit.setLocation(210, 460);
        button_stay.setLocation(210, 520);
        
        //update the player turn label
        //int turn = Integer.parseInt("" + label_playerTurn.getText().charAt(label_playerTurn.getText().length() - 1)) + 1;
        playerIndex++;
        label_playerTurn.setText("Player " + (playerIndex + 1));
        
        //set chance
        String prob = getPercentChance(playersList.get(playerIndex).getHand());
        label_probability.setText("");
        label_probability.setText("Probability: " + prob);
        
        //display special move buttons
        button_hit.setEnabled(true);
        button_stay.setEnabled(true);
        button_doubleDown.setEnabled(true);
        button_split.setEnabled(true);
        button_insurance.setEnabled(true);
        button_split.setVisible(false);
        button_doubleDown.setVisible(false);
        button_insurance.setVisible(false);
        
        if (split(playersList.get(playerIndex))) {
            //display split button
            button_split.setVisible(true);
        }
        if (doubleDown(playersList.get(playerIndex))) {
            //display doubleDown button
            button_doubleDown.setVisible(true);
        }
        if (insurance(playersList.get(playerIndex))) {
            button_insurance.setVisible(true);
            //display insurance button
        }
        
        //update bet and money label
        String bet = "" + playersList.get(playerIndex).getBet();
        if (bet.length() > 3) {
            bet = bet.substring(0, bet.length() - 3) + "," + bet.substring(bet.length() - 3);
        }
        String money = "" + playersList.get(playerIndex).getMoney();
        if (money.length() > 3) {
            money = money.substring(0, money.length() - 3) + "," + money.substring(money.length() - 3);
        }
        label_bet.setText("Bet : $" + bet);
        label_money.setText("Money : $" +  money);
        
        //update the cards
        Card card1 = playersList.get(playerIndex).getHand().get(0);
        Card card2 = playersList.get(playerIndex).getHand().get(1);
        
        //display card1
        ImageIcon icon = new ImageIcon(card1.getImageMap().get(card1.getName()).getAbsolutePath());
        icon = resizeImageIcon(icon, label_playerCard1);
        label_playerCard1.setIcon(icon);
        
        //display card2
        icon = new ImageIcon(card1.getImageMap().get(card2.getName()).getAbsolutePath());
        icon = resizeImageIcon(icon, label_playerCard2);
        label_playerCard2.setIcon(icon);
    }
    
    private void startDealerTurn() {
        //clear extra buttons and card images
        if (panel_gamePlay.getComponentCount() > 14) {
            for (int i = 14; i < panel_gamePlay.getComponentCount(); i++) {
                panel_gamePlay.getComponent(i - 14).setVisible(false);
            }
        }
        
        //hide special buttons and hide and stay buttons
        button_hit.setVisible(false);
        button_stay.setVisible(false);
        button_split.setVisible(false);
        button_doubleDown.setVisible(false);
        button_insurance.setVisible(false);
        
        //hide the player cards and labels
        label_bet.setVisible(false);
        label_money.setVisible(false);
        label_playerCard1.setVisible(false);
        label_playerCard2.setVisible(false);
        
        //move dealer cards to the center of the screen
        label_dealerHoleCard.setLocation(280, 200);
        label_dealerUpCard.setLocation(350, 200);
        
        //display dealer hole card
        Card dealerHoleCard = dealer.getHand().get(0);
        ImageIcon icon = new ImageIcon(dealerHoleCard.getImageMap().get(dealerHoleCard.getName()).getAbsolutePath());
        icon = resizeImageIcon(icon, label_dealerHoleCard);
        label_dealerHoleCard.setIcon(icon);
        panel_gamePlay.repaint();
        
        //set playerTurn label to Dealer
        playerIndex = null;
        label_playerTurn.setText("Dealer");
        
        //Create Timer
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {

                //add new card to dealer hand
                dealer.addCard(new Card(deck.pop().toString()));
                Card newCard = dealer.getHand().get(dealer.getHand().size() - 1);
                
                //check for aces
                int handTotal = dealer.getTotal();
                if (dealer.getSoftTotal() != dealer.getTotal() && dealer.getTotal() > 21)
                    handTotal = dealer.getSoftTotal();

                //make new JLabel for card
                JLabel cardLabel = new JLabel();
                cardLabel.setBounds(280 + ((dealer.getHand().size() - 1) * 75), 200, 150, 200);
                ImageIcon icon = new ImageIcon(newCard.getImageMap().get(newCard.getName()).getAbsolutePath());
                icon = resizeImageIcon(icon, cardLabel);
                cardLabel.setIcon(icon);

                //add card label to panel
                panel_gamePlay.add(cardLabel);
                panel_gamePlay.setComponentZOrder(cardLabel, 0);
                panel_gamePlay.repaint();
                 
                //check to see if the total is greater than 17
                if (handTotal >= 17) {
                    endGame();
                    timer.cancel();
                }
            }
        };
        
        TimerTask endGame = new TimerTask() {
            @Override
            public void run() {
                endGame();
            }
        };
        
        int handTotal = dealer.getTotal();
        if (dealer.getSoftTotal() != dealer.getTotal() && dealer.getTotal() > 21)
            handTotal = dealer.getSoftTotal();
        
        //check total
        if (handTotal >= 17)
            timer.schedule(endGame, 2000);
        else {
            timer.scheduleAtFixedRate(task, 1000, 2000);
        }
        
        /////set game play to false////////////////
        gameplay = false;
    }
    
    public void endGame() {
        //get dealer hand total
        int dealerHandTotal = dealer.getTotal();
        if (dealer.getTotal() != dealer.getSoftTotal())
            dealerHandTotal = dealer.getSoftTotal();
        
        //check to see if dealer busted
        Timer timer = new Timer();
        
        if (dealerHandTotal > 21)
            displayBust(label_dealerHoleCard);
        
        TimerTask endGame = new TimerTask() {
            @Override
            public void run() {
                //clear panel
                for (int i = 0; i < panel_gamePlay.getComponentCount(); i++) {
                    panel_gamePlay.getComponent(i).setVisible(false);
                }
                
                //set length any width variable
                int labelLength = 100;
                int labelHeight = 20;
                
                for (int i = 0; i < playersList.size(); i++) {
                    //make payout variable
                    int payout = 0 - playersList.get(i).getBet();
                    
                    //make text string
                    String text = "PLAYER " + (i + 1);
                    if (playerWin(playersList.get(i))) {
                        text += " WON!";
                        //payout
                        if (blackJack(playersList.get(i))) {
                            payout += (int)(2.5 * playersList.get(i).getBet());
                            playersList.get(i).setMoney(playersList.get(i).getMoney() + (int)(2.5 * playersList.get(i).getBet()));
                        } else {
                            payout += (2 * playersList.get(i).getBet());
                            playersList.get(i).setMoney(playersList.get(i).getMoney() + (2 * playersList.get(i).getBet()));
                        }
                    }
                    else if (playerTied(playersList.get(i))) {
                        text += " TIED!";
                        payout += playersList.get(i).getBet();
                        //aplit the pot
                        playersList.get(i).setMoney(playersList.get(i).getMoney() + playersList.get(i).getBet());
                    }
                    else {
                        text += " LOST!";
                    }

                    //make label to display players win/loss
                    JLabel label = new JLabel();
                    label.setBounds((i + 1) * (panel_gamePlay.getWidth() / (playersList.size() + 1)) - 50, (panel_gamePlay.getHeight() / 2) - 20, labelLength, labelHeight);
                    label.setForeground(Color.white);
                    
                    //check to see if split
                    if (playersList.get(i).getSplit()) {
                        //set labelLength and labelHeight
                        labelLength = 300;
                        labelHeight = 20;
                        text = text.substring(0, 8) + " Hand 1" + text.substring(8);
                        //make label for hand 2
                        String str = "PLAYER " + (i + 1) + " Hand 2";
                        if (playerWin(playersList.get(i), playersList.get(i).getSecondHand())) {
                            str += " WON!";
                            //payout
                            if (blackJack(playersList.get(i))) {
                                payout += (int)(2.5 * playersList.get(i).getBet());
                                playersList.get(i).setMoney(playersList.get(i).getMoney() + (int)(2.5 * playersList.get(i).getBet()));
                            } else {
                                payout += (2 * playersList.get(i).getBet());
                                playersList.get(i).setMoney(playersList.get(i).getMoney() + (2 * playersList.get(i).getBet()));
                            }
                        }
                        else if (playerTied(playersList.get(i), playersList.get(i).getSecondHand())) {
                            str += " TIED!";
                            payout += playersList.get(i).getBet();
                            //split the pot money
                            playersList.get(i).setMoney(playersList.get(i).getMoney() + playersList.get(i).getBet());
                        }
                        else {
                            payout -= playersList.get(i).getBet();
                            str += " LOST!";
                        }
                        
                        //update first JLabel and make second JLabel
                        label.setSize(labelLength, labelHeight);
                        JLabel splitLabel = new JLabel();
                        splitLabel.setBounds(label.getX(), label.getY() + labelHeight, label.getWidth(), label.getHeight());
                        splitLabel.setText(str);
                        splitLabel.setForeground(Color.white);
                        panel_gamePlay.add(splitLabel);
                        panel_gamePlay.setComponentZOrder(splitLabel, 0);
                    }
                    
                    //set label text
                    label.setText(text);
                    
                    //add insurance labels
                    if (playersList.get(i).getInsurance() != 0) {
                        //make insurance label
                        JLabel insuranceLabel = new JLabel();
                        if (split(playersList.get(i)))
                            insuranceLabel.setBounds(label.getX(), label.getY() + 50, 130, 40);
                        else
                            insuranceLabel.setBounds(label.getX(), label.getY() + 10, 130, 40);
                        insuranceLabel.setForeground(Color.white);
                        if (blackJack(dealer)) {
                            payout += playersList.get(i).getBet();
                            insuranceLabel.setText("WON Insurance Bet!");
                            playersList.get(i).setMoney(playersList.get(i).getMoney() + playersList.get(i).getBet());
                        } else {
                            payout -= (playersList.get(i).getBet() / 2);
                            insuranceLabel.setText("LOST Insurance Bet!");
                            playersList.get(i).setMoney(playersList.get(i).getMoney() - playersList.get(i).getInsurance());
                        }
                        
                        panel_gamePlay.add(insuranceLabel);
                        panel_gamePlay.setComponentZOrder(insuranceLabel, 0);
                    }

                    //add display of how much money won/lost
                    int x = label.getX();
                    int y = label.getY() + label.getHeight();
                    if (playersList.get(i).getSplit())
                        y += label.getHeight();
                    if (playersList.get(i).getInsurance() != 0) {
                        y += label.getHeight();
                        playersList.get(i).setInsurance(0);
                    }
                    
                    JLabel payoutLabel = new JLabel();
                    payoutLabel.setBounds(x, y, 150, 20);
                    payoutLabel.setForeground(Color.white);
                    if (payout < 0)
                        payoutLabel.setText("Player " + (i + 1) + " lost $" + Math.abs(payout));
                    else
                        payoutLabel.setText("Player " + (i + 1) + " won $" + payout);
                    panel_gamePlay.add(payoutLabel);
                    panel_gamePlay.setComponentZOrder(payoutLabel, 0);
                    
                    //add label to panel
                    panel_gamePlay.add(label);
                    panel_gamePlay.setComponentZOrder(label, 0);
                }

                //make nextRound Button
                JButton button_nextRound = new JButton("Start Next Round");
                button_nextRound.setBounds((panel_gamePlay.getWidth() / 2) - 60, panel_gamePlay.getHeight() / 3, 120, 20);
                button_nextRound.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        button_nextRound.setEnabled(false);
                        nextRound();
                    }
                });
                button_nextRound.setVisible(true);
                panel_gamePlay.add(button_nextRound);
                panel_gamePlay.setComponentZOrder(button_nextRound, 0);
                panel_gamePlay.repaint();
            }
        };
        
        timer.schedule(endGame, 1500);
        
    }
    
    public void nextRound() {
        dialog_betWindow.setVisible(true);
        
        ///////Clear previous buttons and labels///
        if (panel_bets.getComponentCount() > 2) {
            for (int i = 2; i < panel_bets.getComponentCount(); i++) {
                panel_bets.getComponent(i).setVisible(false);
            }
        }
        
        //removes players from game if they are out
        for (int i = 0; i < playersList.size(); i++) {
            Player player = playersList.get(i);
            if (player.getMoney() == 0) {
                JOptionPane.showMessageDialog(dialog_betWindow, "Player " + (i + 1) + " is out", "A PLAYER IS OUT OF MONEY", JOptionPane.INFORMATION_MESSAGE);
                playersList.remove(player);
                i--;
            }
        }
        
        //set up bet window if players are still in game
        if (!playersList.isEmpty()) {
            ArrayList<JLabel> labelList = new ArrayList();
            ArrayList<JButton> buttonList = new ArrayList();
            for (int i = 0; i < playersList.size(); i++) {
                final int num = i;

                //set bet for players to 500
                playersList.get(i).setBet(500);
                
                //add label and + - buttons to for every player
                labelList.add(new JLabel("Player " + (i + 1) + " bet: $500"));
                buttonList.add(new JButton("+"));
                buttonList.add(new JButton("-"));

                //add properties to each label/button
                labelList.get(i).setBounds((i + 1) * (panel_bets.getWidth()/(playersList.size() + 1)) - 80, (int)(.75 * panel_bets.getHeight()), 120, 40);
                labelList.get(i).setForeground(Color.white);
                buttonList.get(buttonList.size() - 1).setBounds(labelList.get(i).getX() + 115, labelList.get(i).getY() + 20, 40, 20);
                buttonList.get(buttonList.size() - 2).setBounds(labelList.get(i).getX() + 115, labelList.get(i).getY(), 40, 20);
                buttonList.get(buttonList.size() - 1).addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (playersList.get(num).getBet() > 500) {
                            playersList.get(num).setBet(playersList.get(num).getBet() - 500);
                            labelList.get(num).setText("Player " + (num + 1) + " bet: $" + playersList.get(num).getBet());
                        } else {
                            JOptionPane.showMessageDialog(dialog_betWindow, "500 is the minimum bet", "ERROR: cant bet lower than 500", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                });
                buttonList.get(buttonList.size() - 2).addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (playersList.get(num).getBet() < playersList.get(num).getMoney()) {
                            playersList.get(num).setBet(playersList.get(num).getBet() + 500);
                            labelList.get(num).setText("Player " + (num + 1) + " bet: $" + playersList.get(num).getBet());
                        } else {
                            JOptionPane.showMessageDialog(dialog_betWindow, "Player " + (num + 1) + " only has $" + playersList.get(num).getMoney() + " to bet", "ERROR: bet exceeds player's available money", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                });

                panel_bets.add(labelList.get(i));
                panel_bets.add(buttonList.get(buttonList.size() - 1));
                panel_bets.add(buttonList.get(buttonList.size() - 2));
            }

            panel_bets.repaint();
        } else {
            displayGameOver();
        }
    }
    
    private void displayGameOver() {
        ///////Clear Components in panel_bet///
        for (int i = 0; i < panel_bets.getComponentCount(); i++) {
            panel_bets.getComponent(i).setVisible(false);
        }
        
        /////////Make Game Over Label///////////
        JLabel label_gameOver = new JLabel("GAME OVER");
        Font font = new Font("arial", Font.BOLD, 64);
        label_gameOver.setFont(font);
        label_gameOver.setForeground(Color.red);
        label_gameOver.setFont(font);
        label_gameOver.setBounds(210, 210, 750, 100);
        
        panel_bets.add(label_gameOver);
        panel_bets.setComponentZOrder(label_gameOver, 0);
        panel_bets.repaint();
    }
    
    public String getPercentChance(ArrayList<Card> hand) {
        double chance = 0;
        int count = 0;
        int handTotal = 0;
        
        //convert deck to array
        Card[] deck = new Card[this.deck.size()];
        for (int i = 0; i < deck.length; i++)
            deck[i] = this.deck.get(i);
        for (Card card : deck) {
            if (card.getValue() == 5)
                count++;
        }
        
        //get total of hand
        int softTotal = 0;
        
        int hardTotal = 0;
        for (Card card : hand) {
            if (card.getValue() == 11)
                softTotal += 1;
            else
                softTotal += card.getValue();
            hardTotal += card.getValue();
        }
        if (hardTotal > 21)
            handTotal = softTotal; 
        else
            handTotal = hardTotal;
        
        if (handTotal == 21)
            return "100%";
        
        
        times = 0;
        this.count = 0;
        initTotal = dealer.getHand().get(1).getValue();
        if (handTotal < 17) {
            //return probability of dealer busting
            dealerBustCount(dealer.getHand().get(1).getValue(), deckArray(), 0);
            chance = (double)this.count / (double)times;
        } else {
            dealerBetterThan(handTotal, dealer.getHand().get(1).getValue(), deckArray(), 0);
            chance = 1 - ((double)this.count / (double)times);
        }
        
        chance *= 100;
        
        return String.format("%.2f", chance) + "%";
    }
    
    private void dealerBustCount(int total, ArrayList<Integer> deck, int prevNum) {
        //set deck array to initial deck when incrementing through a new possible
        //dealer down card
        if (prevNum == initTotal && total != prevNum) {
            deck = deckArray();
            deck.remove(total - prevNum);
        }

        //get bust list and hit list
        ArrayList<Integer> hitList = new ArrayList();
        ArrayList<Integer> bustList = new ArrayList();
        for (int i = 2; i < 12; i++) {
            if (total + i < 17)
                hitList.add(i);
            if (total + i > 21) {
                bustList.add(i);
            }
        }
        
        //increment number of times
        for (int i : deck)
            times++;

        //find bust count
        for (int num : bustList) {
            for (int card : deck) {
                if (card == num)
                    count++;
            }
        }

        if (hitList.size() != 0) {
            for (int num : hitList) {
                if (deck.contains(num)) {
                    removed = deck.remove(deck.indexOf(num));
                    dealerBustCount(total + num, deck, total);
                }
            }
            
        } else {
            deck.add(removed);
        }
    }
    
    private void dealerBetterThan(int playerTotal, int total, ArrayList<Integer> deck, int prevNum) {
        //set deck array to initial deck when incrementing through a new possible
        //dealer down card
        if (prevNum == initTotal && total != prevNum) {
            deck = deckArray();
            deck.remove(total - prevNum);
        }

        //get bust list and hit list
        ArrayList<Integer> hitList = new ArrayList();
        ArrayList<Integer> countList = new ArrayList();
        for (int i = 2; i < 12; i++) {
            if (total + i < 17)
                hitList.add(i);
            else if (total + i < 22 && total + i > playerTotal) {
                countList.add(i);
            }
        }
        
        //increment number of times
        for (int i : deck)
            times++;
        
        //find bust count
        for (int num : countList) {
            for (int card : deck) {
                if (card == num)
                    count++;
            }
        }

        if (hitList.size() != 0) {
            for (int num : hitList) {
                if (deck.contains(num)) {
                    removed = deck.remove(deck.indexOf(num));
                    dealerBetterThan(playerTotal, total + num, deck, total);
                }
            }
        } else {
            deck.add(removed);
        }
    }
    
    private ArrayList<Integer> deckArray() {
        ArrayList<Integer> deckArr = new ArrayList<>();
        for (int i = 0; i < deck.size(); i++)
            deckArr.add(deck.get(i).getValue());
        return deckArr;
    
    }
    
    public ImageIcon resizeImageIcon(ImageIcon icon, JLabel label) {
        Image img = icon.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
        icon = new ImageIcon(img);
        return icon;
    }
}
